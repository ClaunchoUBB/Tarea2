/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPTipodedoc().apply(this);
        outStart(node);
    }

    public void inATipodedoc(ATipodedoc node)
    {
        defaultIn(node);
    }

    public void outATipodedoc(ATipodedoc node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATipodedoc(ATipodedoc node)
    {
        inATipodedoc(node);
        if(node.getFightml() != null)
        {
            node.getFightml().apply(this);
        }
        if(node.getCerrar() != null)
        {
            node.getCerrar().apply(this);
        }
        if(node.getDoctype() != null)
        {
            node.getDoctype().apply(this);
        }
        outATipodedoc(node);
    }

    public void inAFightml(AFightml node)
    {
        defaultIn(node);
    }

    public void outAFightml(AFightml node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFightml(AFightml node)
    {
        inAFightml(node);
        if(node.getFinhtml() != null)
        {
            node.getFinhtml().apply(this);
        }
        if(node.getCuerpo() != null)
        {
            node.getCuerpo().apply(this);
        }
        if(node.getHtml() != null)
        {
            node.getHtml().apply(this);
        }
        outAFightml(node);
    }

    public void inACuerpo(ACuerpo node)
    {
        defaultIn(node);
    }

    public void outACuerpo(ACuerpo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACuerpo(ACuerpo node)
    {
        inACuerpo(node);
        if(node.getFinbody() != null)
        {
            node.getFinbody().apply(this);
        }
        if(node.getSvg() != null)
        {
            node.getSvg().apply(this);
        }
        if(node.getBody() != null)
        {
            node.getBody().apply(this);
        }
        outACuerpo(node);
    }

    public void inASvg(ASvg node)
    {
        defaultIn(node);
    }

    public void outASvg(ASvg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASvg(ASvg node)
    {
        inASvg(node);
        if(node.getFiguras() != null)
        {
            node.getFiguras().apply(this);
        }
        if(node.getTab() != null)
        {
            node.getTab().apply(this);
        }
        if(node.getCerrar() != null)
        {
            node.getCerrar().apply(this);
        }
        if(node.getDatosvg() != null)
        {
            node.getDatosvg().apply(this);
        }
        if(node.getSvgEti() != null)
        {
            node.getSvgEti().apply(this);
        }
        outASvg(node);
    }

    public void inADatosvg(ADatosvg node)
    {
        defaultIn(node);
    }

    public void outADatosvg(ADatosvg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADatosvg(ADatosvg node)
    {
        inADatosvg(node);
        if(node.getHeight() != null)
        {
            node.getHeight().apply(this);
        }
        if(node.getWidth() != null)
        {
            node.getWidth().apply(this);
        }
        outADatosvg(node);
    }

    public void inAFiguras(AFiguras node)
    {
        defaultIn(node);
    }

    public void outAFiguras(AFiguras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFiguras(AFiguras node)
    {
        inAFiguras(node);
        if(node.getFinsvg() != null)
        {
            node.getFinsvg().apply(this);
        }
        outAFiguras(node);
    }

    public void inACirculoFiguras(ACirculoFiguras node)
    {
        defaultIn(node);
    }

    public void outACirculoFiguras(ACirculoFiguras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACirculoFiguras(ACirculoFiguras node)
    {
        inACirculoFiguras(node);
        if(node.getCirculo() != null)
        {
            node.getCirculo().apply(this);
        }
        outACirculoFiguras(node);
    }

    public void inALineaFiguras(ALineaFiguras node)
    {
        defaultIn(node);
    }

    public void outALineaFiguras(ALineaFiguras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALineaFiguras(ALineaFiguras node)
    {
        inALineaFiguras(node);
        if(node.getLinea() != null)
        {
            node.getLinea().apply(this);
        }
        outALineaFiguras(node);
    }

    public void inARectanguloFiguras(ARectanguloFiguras node)
    {
        defaultIn(node);
    }

    public void outARectanguloFiguras(ARectanguloFiguras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARectanguloFiguras(ARectanguloFiguras node)
    {
        inARectanguloFiguras(node);
        if(node.getRectangulo() != null)
        {
            node.getRectangulo().apply(this);
        }
        outARectanguloFiguras(node);
    }

    public void inAElipseFiguras(AElipseFiguras node)
    {
        defaultIn(node);
    }

    public void outAElipseFiguras(AElipseFiguras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElipseFiguras(AElipseFiguras node)
    {
        inAElipseFiguras(node);
        if(node.getElipse() != null)
        {
            node.getElipse().apply(this);
        }
        outAElipseFiguras(node);
    }

    public void inAPoligonoFiguras(APoligonoFiguras node)
    {
        defaultIn(node);
    }

    public void outAPoligonoFiguras(APoligonoFiguras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPoligonoFiguras(APoligonoFiguras node)
    {
        inAPoligonoFiguras(node);
        if(node.getPoligono() != null)
        {
            node.getPoligono().apply(this);
        }
        outAPoligonoFiguras(node);
    }

    public void inAPolilineaFiguras(APolilineaFiguras node)
    {
        defaultIn(node);
    }

    public void outAPolilineaFiguras(APolilineaFiguras node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPolilineaFiguras(APolilineaFiguras node)
    {
        inAPolilineaFiguras(node);
        if(node.getPolilinea() != null)
        {
            node.getPolilinea().apply(this);
        }
        outAPolilineaFiguras(node);
    }

    public void inACirculo(ACirculo node)
    {
        defaultIn(node);
    }

    public void outACirculo(ACirculo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACirculo(ACirculo node)
    {
        inACirculo(node);
        if(node.getFiguras() != null)
        {
            node.getFiguras().apply(this);
        }
        if(node.getFinfigura() != null)
        {
            node.getFinfigura().apply(this);
        }
        if(node.getStrokewidth() != null)
        {
            node.getStrokewidth().apply(this);
        }
        if(node.getStroke() != null)
        {
            node.getStroke().apply(this);
        }
        if(node.getFill() != null)
        {
            node.getFill().apply(this);
        }
        if(node.getR() != null)
        {
            node.getR().apply(this);
        }
        if(node.getCy() != null)
        {
            node.getCy().apply(this);
        }
        if(node.getCx() != null)
        {
            node.getCx().apply(this);
        }
        if(node.getCirculoEti() != null)
        {
            node.getCirculoEti().apply(this);
        }
        outACirculo(node);
    }

    public void inACx(ACx node)
    {
        defaultIn(node);
    }

    public void outACx(ACx node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACx(ACx node)
    {
        inACx(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCxw() != null)
        {
            node.getCxw().apply(this);
        }
        outACx(node);
    }

    public void inACy(ACy node)
    {
        defaultIn(node);
    }

    public void outACy(ACy node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACy(ACy node)
    {
        inACy(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCyw() != null)
        {
            node.getCyw().apply(this);
        }
        outACy(node);
    }

    public void inAR(AR node)
    {
        defaultIn(node);
    }

    public void outAR(AR node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAR(AR node)
    {
        inAR(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getRw() != null)
        {
            node.getRw().apply(this);
        }
        outAR(node);
    }

    public void inAFill(AFill node)
    {
        defaultIn(node);
    }

    public void outAFill(AFill node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFill(AFill node)
    {
        inAFill(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getFillw() != null)
        {
            node.getFillw().apply(this);
        }
        outAFill(node);
    }

    public void inAStroke(AStroke node)
    {
        defaultIn(node);
    }

    public void outAStroke(AStroke node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStroke(AStroke node)
    {
        inAStroke(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getStrokew() != null)
        {
            node.getStrokew().apply(this);
        }
        outAStroke(node);
    }

    public void inAStrokewidth(AStrokewidth node)
    {
        defaultIn(node);
    }

    public void outAStrokewidth(AStrokewidth node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrokewidth(AStrokewidth node)
    {
        inAStrokewidth(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getStrokewidthw() != null)
        {
            node.getStrokewidthw().apply(this);
        }
        outAStrokewidth(node);
    }

    public void inAStyle(AStyle node)
    {
        defaultIn(node);
    }

    public void outAStyle(AStyle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStyle(AStyle node)
    {
        inAStyle(node);
        if(node.getFinstyle() != null)
        {
            node.getFinstyle().apply(this);
        }
        if(node.getStrokewidth() != null)
        {
            node.getStrokewidth().apply(this);
        }
        if(node.getSegundoseparador() != null)
        {
            node.getSegundoseparador().apply(this);
        }
        if(node.getStroke() != null)
        {
            node.getStroke().apply(this);
        }
        if(node.getPrimerseparador() != null)
        {
            node.getPrimerseparador().apply(this);
        }
        if(node.getFill() != null)
        {
            node.getFill().apply(this);
        }
        if(node.getIniciostyle() != null)
        {
            node.getIniciostyle().apply(this);
        }
        if(node.getStylew() != null)
        {
            node.getStylew().apply(this);
        }
        outAStyle(node);
    }

    public void inALinestyle(ALinestyle node)
    {
        defaultIn(node);
    }

    public void outALinestyle(ALinestyle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALinestyle(ALinestyle node)
    {
        inALinestyle(node);
        if(node.getFinstyle() != null)
        {
            node.getFinstyle().apply(this);
        }
        if(node.getStrokewidth() != null)
        {
            node.getStrokewidth().apply(this);
        }
        if(node.getSegundoseparador() != null)
        {
            node.getSegundoseparador().apply(this);
        }
        if(node.getStroke() != null)
        {
            node.getStroke().apply(this);
        }
        if(node.getIniciostyle() != null)
        {
            node.getIniciostyle().apply(this);
        }
        if(node.getStylew() != null)
        {
            node.getStylew().apply(this);
        }
        outALinestyle(node);
    }

    public void inALinea(ALinea node)
    {
        defaultIn(node);
    }

    public void outALinea(ALinea node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALinea(ALinea node)
    {
        inALinea(node);
        if(node.getFiguras() != null)
        {
            node.getFiguras().apply(this);
        }
        if(node.getFinfigura() != null)
        {
            node.getFinfigura().apply(this);
        }
        if(node.getLinestyle() != null)
        {
            node.getLinestyle().apply(this);
        }
        if(node.getY2() != null)
        {
            node.getY2().apply(this);
        }
        if(node.getY1() != null)
        {
            node.getY1().apply(this);
        }
        if(node.getX2() != null)
        {
            node.getX2().apply(this);
        }
        if(node.getX1() != null)
        {
            node.getX1().apply(this);
        }
        if(node.getLineaEti() != null)
        {
            node.getLineaEti().apply(this);
        }
        outALinea(node);
    }

    public void inAX1(AX1 node)
    {
        defaultIn(node);
    }

    public void outAX1(AX1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAX1(AX1 node)
    {
        inAX1(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getX1w() != null)
        {
            node.getX1w().apply(this);
        }
        outAX1(node);
    }

    public void inAX2(AX2 node)
    {
        defaultIn(node);
    }

    public void outAX2(AX2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAX2(AX2 node)
    {
        inAX2(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getX2w() != null)
        {
            node.getX2w().apply(this);
        }
        outAX2(node);
    }

    public void inAY1(AY1 node)
    {
        defaultIn(node);
    }

    public void outAY1(AY1 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAY1(AY1 node)
    {
        inAY1(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getY1w() != null)
        {
            node.getY1w().apply(this);
        }
        outAY1(node);
    }

    public void inAY2(AY2 node)
    {
        defaultIn(node);
    }

    public void outAY2(AY2 node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAY2(AY2 node)
    {
        inAY2(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getY2w() != null)
        {
            node.getY2w().apply(this);
        }
        outAY2(node);
    }

    public void inARectangulo(ARectangulo node)
    {
        defaultIn(node);
    }

    public void outARectangulo(ARectangulo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARectangulo(ARectangulo node)
    {
        inARectangulo(node);
        if(node.getStyle() != null)
        {
            node.getStyle().apply(this);
        }
        if(node.getHeight() != null)
        {
            node.getHeight().apply(this);
        }
        if(node.getWidth() != null)
        {
            node.getWidth().apply(this);
        }
        if(node.getY() != null)
        {
            node.getY().apply(this);
        }
        if(node.getX() != null)
        {
            node.getX().apply(this);
        }
        if(node.getRectanguloEti() != null)
        {
            node.getRectanguloEti().apply(this);
        }
        outARectangulo(node);
    }

    public void inAX(AX node)
    {
        defaultIn(node);
    }

    public void outAX(AX node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAX(AX node)
    {
        inAX(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getXw() != null)
        {
            node.getXw().apply(this);
        }
        outAX(node);
    }

    public void inAY(AY node)
    {
        defaultIn(node);
    }

    public void outAY(AY node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAY(AY node)
    {
        inAY(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getYw() != null)
        {
            node.getYw().apply(this);
        }
        outAY(node);
    }

    public void inAElipse(AElipse node)
    {
        defaultIn(node);
    }

    public void outAElipse(AElipse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAElipse(AElipse node)
    {
        inAElipse(node);
        if(node.getStyle() != null)
        {
            node.getStyle().apply(this);
        }
        if(node.getRy() != null)
        {
            node.getRy().apply(this);
        }
        if(node.getRx() != null)
        {
            node.getRx().apply(this);
        }
        if(node.getCy() != null)
        {
            node.getCy().apply(this);
        }
        if(node.getCx() != null)
        {
            node.getCx().apply(this);
        }
        if(node.getElipseEti() != null)
        {
            node.getElipseEti().apply(this);
        }
        outAElipse(node);
    }

    public void inARx(ARx node)
    {
        defaultIn(node);
    }

    public void outARx(ARx node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARx(ARx node)
    {
        inARx(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getRxw() != null)
        {
            node.getRxw().apply(this);
        }
        outARx(node);
    }

    public void inARy(ARy node)
    {
        defaultIn(node);
    }

    public void outARy(ARy node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARy(ARy node)
    {
        inARy(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getRyw() != null)
        {
            node.getRyw().apply(this);
        }
        outARy(node);
    }

    public void inAPoligono(APoligono node)
    {
        defaultIn(node);
    }

    public void outAPoligono(APoligono node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPoligono(APoligono node)
    {
        inAPoligono(node);
        if(node.getStyle() != null)
        {
            node.getStyle().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getPoints() != null)
        {
            node.getPoints().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getPointsw() != null)
        {
            node.getPointsw().apply(this);
        }
        if(node.getPoligonoEti() != null)
        {
            node.getPoligonoEti().apply(this);
        }
        outAPoligono(node);
    }

    public void inAPoints(APoints node)
    {
        defaultIn(node);
    }

    public void outAPoints(APoints node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPoints(APoints node)
    {
        inAPoints(node);
        if(node.getEspacio() != null)
        {
            node.getEspacio().apply(this);
        }
        if(node.getY() != null)
        {
            node.getY().apply(this);
        }
        if(node.getComa() != null)
        {
            node.getComa().apply(this);
        }
        if(node.getX() != null)
        {
            node.getX().apply(this);
        }
        outAPoints(node);
    }

    public void inAPolilinea(APolilinea node)
    {
        defaultIn(node);
    }

    public void outAPolilinea(APolilinea node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPolilinea(APolilinea node)
    {
        inAPolilinea(node);
        if(node.getStyle() != null)
        {
            node.getStyle().apply(this);
        }
        if(node.getB() != null)
        {
            node.getB().apply(this);
        }
        if(node.getPoints() != null)
        {
            node.getPoints().apply(this);
        }
        if(node.getA() != null)
        {
            node.getA().apply(this);
        }
        if(node.getPointsw() != null)
        {
            node.getPointsw().apply(this);
        }
        if(node.getPolilineaEti() != null)
        {
            node.getPolilineaEti().apply(this);
        }
        outAPolilinea(node);
    }
}
