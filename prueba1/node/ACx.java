/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ACx extends PCx
{
    private TCxw _cxw_;
    private TValor _valor_;

    public ACx()
    {
        // Constructor
    }

    public ACx(
        @SuppressWarnings("hiding") TCxw _cxw_,
        @SuppressWarnings("hiding") TValor _valor_)
    {
        // Constructor
        setCxw(_cxw_);

        setValor(_valor_);

    }

    @Override
    public Object clone()
    {
        return new ACx(
            cloneNode(this._cxw_),
            cloneNode(this._valor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACx(this);
    }

    public TCxw getCxw()
    {
        return this._cxw_;
    }

    public void setCxw(TCxw node)
    {
        if(this._cxw_ != null)
        {
            this._cxw_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cxw_ = node;
    }

    public TValor getValor()
    {
        return this._valor_;
    }

    public void setValor(TValor node)
    {
        if(this._valor_ != null)
        {
            this._valor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._valor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._cxw_)
            + toString(this._valor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._cxw_ == child)
        {
            this._cxw_ = null;
            return;
        }

        if(this._valor_ == child)
        {
            this._valor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._cxw_ == oldChild)
        {
            setCxw((TCxw) newChild);
            return;
        }

        if(this._valor_ == oldChild)
        {
            setValor((TValor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
