/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ADatosvg extends PDatosvg
{
    private TWidth _width_;
    private THeight _height_;

    public ADatosvg()
    {
        // Constructor
    }

    public ADatosvg(
        @SuppressWarnings("hiding") TWidth _width_,
        @SuppressWarnings("hiding") THeight _height_)
    {
        // Constructor
        setWidth(_width_);

        setHeight(_height_);

    }

    @Override
    public Object clone()
    {
        return new ADatosvg(
            cloneNode(this._width_),
            cloneNode(this._height_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADatosvg(this);
    }

    public TWidth getWidth()
    {
        return this._width_;
    }

    public void setWidth(TWidth node)
    {
        if(this._width_ != null)
        {
            this._width_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._width_ = node;
    }

    public THeight getHeight()
    {
        return this._height_;
    }

    public void setHeight(THeight node)
    {
        if(this._height_ != null)
        {
            this._height_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._height_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._width_)
            + toString(this._height_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._width_ == child)
        {
            this._width_ = null;
            return;
        }

        if(this._height_ == child)
        {
            this._height_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._width_ == oldChild)
        {
            setWidth((TWidth) newChild);
            return;
        }

        if(this._height_ == oldChild)
        {
            setHeight((THeight) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
