/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ATipodedoc extends PTipodedoc
{
    private TDoctype _doctype_;
    private TCerrar _cerrar_;
    private PFightml _fightml_;

    public ATipodedoc()
    {
        // Constructor
    }

    public ATipodedoc(
        @SuppressWarnings("hiding") TDoctype _doctype_,
        @SuppressWarnings("hiding") TCerrar _cerrar_,
        @SuppressWarnings("hiding") PFightml _fightml_)
    {
        // Constructor
        setDoctype(_doctype_);

        setCerrar(_cerrar_);

        setFightml(_fightml_);

    }

    @Override
    public Object clone()
    {
        return new ATipodedoc(
            cloneNode(this._doctype_),
            cloneNode(this._cerrar_),
            cloneNode(this._fightml_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseATipodedoc(this);
    }

    public TDoctype getDoctype()
    {
        return this._doctype_;
    }

    public void setDoctype(TDoctype node)
    {
        if(this._doctype_ != null)
        {
            this._doctype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._doctype_ = node;
    }

    public TCerrar getCerrar()
    {
        return this._cerrar_;
    }

    public void setCerrar(TCerrar node)
    {
        if(this._cerrar_ != null)
        {
            this._cerrar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._cerrar_ = node;
    }

    public PFightml getFightml()
    {
        return this._fightml_;
    }

    public void setFightml(PFightml node)
    {
        if(this._fightml_ != null)
        {
            this._fightml_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fightml_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._doctype_)
            + toString(this._cerrar_)
            + toString(this._fightml_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._doctype_ == child)
        {
            this._doctype_ = null;
            return;
        }

        if(this._cerrar_ == child)
        {
            this._cerrar_ = null;
            return;
        }

        if(this._fightml_ == child)
        {
            this._fightml_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._doctype_ == oldChild)
        {
            setDoctype((TDoctype) newChild);
            return;
        }

        if(this._cerrar_ == oldChild)
        {
            setCerrar((TCerrar) newChild);
            return;
        }

        if(this._fightml_ == oldChild)
        {
            setFightml((PFightml) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
