/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AY2 extends PY2
{
    private TY2w _y2w_;
    private TValor _valor_;

    public AY2()
    {
        // Constructor
    }

    public AY2(
        @SuppressWarnings("hiding") TY2w _y2w_,
        @SuppressWarnings("hiding") TValor _valor_)
    {
        // Constructor
        setY2w(_y2w_);

        setValor(_valor_);

    }

    @Override
    public Object clone()
    {
        return new AY2(
            cloneNode(this._y2w_),
            cloneNode(this._valor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAY2(this);
    }

    public TY2w getY2w()
    {
        return this._y2w_;
    }

    public void setY2w(TY2w node)
    {
        if(this._y2w_ != null)
        {
            this._y2w_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._y2w_ = node;
    }

    public TValor getValor()
    {
        return this._valor_;
    }

    public void setValor(TValor node)
    {
        if(this._valor_ != null)
        {
            this._valor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._valor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._y2w_)
            + toString(this._valor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._y2w_ == child)
        {
            this._y2w_ = null;
            return;
        }

        if(this._valor_ == child)
        {
            this._valor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._y2w_ == oldChild)
        {
            setY2w((TY2w) newChild);
            return;
        }

        if(this._valor_ == oldChild)
        {
            setValor((TValor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
